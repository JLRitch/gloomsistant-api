openapi: 3.0.3

info:
  title: gloom-sistant
  version: 0.0.1

servers:
  - url: http://localhost:8000
    description: Local Server

paths:
# ------------------------------------- #
# players
# ------------------------------------- #
  /players:
    get:
      tags:
        - Players
      summary: Returns a list of players.
      description: >
        Returns a list of basic info for all players.
      operationId: getUsers
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
              examples:
                normal:
                  summary: Normal
                  value: >
                    [
                      {
                        "id": 1,
                        "firstName": "Logan",
                        "lastName": "Lucky",
                        "email": "ll@llmail.com"
                      },
                      {
                        "id": 2,
                        "firstName": "George",
                        "lastName": "Gorgeous",
                        "email": "gg@ggmail.com"
                      }
                    ]
                empty:
                  summary: Empty
                  value: []
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      tags:
        - Players
      summary: Creates a player/user
      description: >
        Creates a player/user given required information and returns the id
        of the newly created record.
      operationId: createPlayer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
              required:
                - firstName
                - lastName
                - email
            examples:
              normal:
                summary: Normal
                value: >
                  {
                    "firstName": "Logan",
                    "lastName": "Lucky",
                    "email": "ll@llmail.com"
                  }
      responses:
        201:
          description: Resource created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
              examples:
                normal:
                  summary: Normal
                  value: >
                    {
                      "id": 1
                    }
        400:
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /players/{id}:
    get:
      tags:
        - Players
      summary: Responds with a specific player's details
      description: >
        Returns all the details associated with a given player
      operationId: getPlayerDetail
      parameters:
        - name: id
          in: path
          description: ID of requested player
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 1
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  characters:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
              examples:
                normal:
                  summary: Normal
                  value: >
                    {
                      "id": 2,
                      "firstName": "George",
                      "lastName": "Gorgeous",
                      "email": "gg@ggmail.com"
                      "characters": [
                        {
                          "id": 3,
                          "name": "Turkish"
                        },
                        {
                          "id": 4,
                          "name": "Bullet Tooth Tony"
                        },
                        {
                          "id": 5,
                          "name": "Mickey O'Neil"
                        }
                      ]
                    }
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      tags:
        - Players
      summary: Updates a specific player's details
      description: >
        Updates the details of a specific player given new info in
        request payload.
      operationId: updatePlayer
      parameters:
        - name: id
          in: path
          description: ID of requested player
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
      responses:
        204:
          description: Resource updated
        404:
          description: An error occurred
    delete:
      tags:
        - Players
      summary: Deletes a player
      description: >
        Deletes a player
      operationId: deletePlayer
      parameters:
        - name: id
          in: path
          description: ID of player to be deleted
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 1
      responses:
        204:
          description: Resource deleted
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /players/{id}/characters:
    get:
      tags:
        - Players
        - Characters
      summary: Responds with a specific player's characters
      description: >
        Returns all the characters associated with a given player
      operationId: getPlayerCharacters
      parameters:
        - name: id
          in: path
          description: ID of requested player
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 1
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
              examples:
                normal:
                  summary: Normal
                  value: >
                    [
                      {
                        "id": 3,
                        "name": "Turkish"
                      },
                      {
                        "id": 4,
                        "name": "Bullet Tooth Tony"
                      },
                      {
                        "id": 5,
                        "name": "Mickey O'Neil"
                      }
                    ]
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

# ------------------------------------- #
# characters
# ------------------------------------- #
  /characters:
    post:
      tags:
        - Characters
      summary: Creates a new character record
      description: >
        Creates a new character given the information provided in request body.
        Returns the id of the newly created character.
      operationId: createCharacter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                playerid:
                  type: integer
                class:
                  type: string
              required:
                - name
                - playerid
                - class
            examples:
              normal:
                summary: Normal
                value: >
                  {
                    "name": "Turkish",
                    "playerId": 2,
                    "class": "Quatryl Demolitionist",
                    "level": 1,
                    "xp": 35,
                    "gold": 16,
                    "inventory": [
                      "Heater Shield",
                      "Healing Potion",
                      "Winged Shoes"
                    ],
                    "perks": [
                      {
                        "perkDesc": "Replace one +1 card with one +2 FIRE card",
                        "perkLevel": 1
                      }
                    ],
                    "goalsCompleted": 1
                  }
      responses:
        201:
          description: Resource created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
              examples:
                normal:
                  summary: Normal
                  value: >
                    {
                      "id": 3
                    }
        400:
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/UnexpectedError'
  
  /characters/{id}:
    get:
      tags:
        - Characters
      summary: Responds with a specific character's details
      description: >
        Returns all the details associated with a given character
      operationId: getCharacter
      parameters:
        - name: id
          in: path
          description: ID of requested character
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 1
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  playerId:
                    type: integer
                  class:
                    type: string
                  level:
                    type: integer
                  xp:
                    type: integer
                  gold:
                    type: integer
                  inventory:
                    type: array
                    items:
                      type: string
                  perks:
                    type: array
                    items:
                      type: object
                      properties:
                        perkDesc:
                          type: string
                        perkLevel:
                          type: integer
                  goalsCompleted:
                    type: integer
              examples:
                normal:
                  summary: Normal
                  value: >
                    {
                      "id": 3,
                      "name": "Turkish",
                      "playerId": 2,
                      "class": "Quatryl Demolitionist",
                      "level": 1,
                      "xp": 35,
                      "gold": 16,
                      "inventory": [
                        "Heater Shield",
                        "Healing Potion",
                        "Winged Shoes"
                      ],
                      "perks": [
                        {
                          "perkDesc": "Replace one +1 card with one +2 FIRE card",
                          "perkLevel": 1
                        }
                      ],
                      "goalsCompleted": 1
                    }
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    put:
      tags:
        - Characters
      summary: Updates a specific character's details
      description: >
        Updates the details of a specific character given new info in
        request payload.
      operationId: updateCharacter
      parameters:
        - name: id
          in: path
          description: ID of requested character
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                class:
                  type: string
                level:
                  type: integer
                xp:
                  type: integer
                gold:
                  type: integer
                inventory:
                  type: array
                  items:
                    type: string
                perks:
                  type: array
                  items:
                    type: object
                    properties:
                      perkDesc:
                        type: string
                      perkLevel:
                        type: integer
                goalsCompleted:
                  type: integer
            examples:
              normal:
                summary: Normal
                value: >
                  {
                    "name": "Turkish",
                    "class": "Quatryl Demolitionist",
                    "level": 2,
                    "xp": 45,
                    "gold": 25,
                    "inventory": [
                      "Heater Shield",
                      "Healing Potion",
                      "Winged Shoes"
                    ],
                    "perks": [
                      {
                        "perkDesc": "Replace one +1 card with one +2 FIRE card",
                        "perkLevel": 2
                      }
                    ],
                    "goalsCompleted": 2
                  }
      responses:
        204:
          description: Resource updated
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
        - Characters
      summary: Deletes a character
      description: >
        Deletes a character
      operationId: deleteCharacter
      parameters:
        - name: id
          in: path
          description: ID of character to be deleted
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 1
      responses:
        204:
          description: Resource deleted
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'
# ------------------------------------- #
# Campaigns
# ------------------------------------- #
  /campaigns:
    get:
      tags:
        - Campaigns
      summary: Returns a list of campaigns.
      description: >
        Returns a list of basic info for all campaigns.
      operationId: getCampaigns
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
              examples:
                normal:
                  summary: Normal
                  value: >
                    [
                      {
                        "id": 1,
                        "name": "Jere's Game"
                      },
                      {
                        "id": 2,
                        "name": "Tom's Game"
                      }
                    ]
                empty:
                  summary: Empty
                  value: []
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'
    
    post:
      tags:
        - Campaigns
      summary: Creates a campaign
      description: >
        Creates a campaign given required information and returns the id
        of the newly created record.
      operationId: createCampaign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                characters:
                  type: array
                  items:
                    type: integer
              required:
                - name
            examples:
              normal:
                summary: Normal
                value: >
                  {
                    "name": "Logan",
                    "characters": [
                      1,
                      2
                    ]
                  }
      responses:
        201:
          description: Resource created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
              examples:
                normal:
                  summary: Normal
                  value: >
                    {
                      "id": 1
                    }
        400:
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/UnexpectedError'
  
  /campaigns/{id}:
    get:
      tags:
        - Campaigns
      summary: Responds with a specific campaigns's details
      description: >
        Returns all the details associated with a given campaign
      operationId: getCampaignDetail
      parameters:
        - name: id
          in: path
          description: ID of requested campaign
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 1
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  missionsCompleted:
                    type: array
                    items:
                      type: integer
                  missionsAvailable:
                    type: array
                    items:
                      type: integer
                  eventsCompleted:
                    type: array
                    items:
                      type: integer
                  itemsAvailable:
                    type: array
                    items:
                      type: integer
              examples:
                normal:
                  summary: Normal
                  value: >
                    {
                      "id": 1,
                      "name": "Jere's Game",
                      "missionsCompleted": [
                        1, 2, 3, 4
                      ],
                      "missionsAvailable": [
                        5
                      ],
                      "eventsCompleted": [
                        8
                      ],
                      "itemsAvailable": [
                        1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8
                        9, 9, 10, 10, 11, 11, 12, 12
                      ]
                    }
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    put:
      tags:
        - Campaigns
      summary: Updates a specific campaign's name
      description: >
        Updates a the name of the specific campaign for the id provided
      operationId: updateCampaignName
      parameters:
        - name: id
          in: path
          description: ID of requested campaign
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
            examples:
              normal:
                summary: Normal
                value: >
                  {
                    "name": "Kate's Game"
                  }
      responses:
        204:
          description: Resource updated
        404:
          description: An error occurred
      
    delete:
      tags:
        - Campaigns
      summary: Deletes a campaign
      description: >
        Deletes a campaign for the id given
      operationId: deleteCampaign
      parameters:
        - name: id
          in: path
          description: ID of campaign
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 1
      responses:
        204:
          description: Resource deleted
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

# ------------------------------------- #
# Sessions
# ------------------------------------- #
  /sessions:
    post:
      tags:
        - Sessions
      summary: Create a new session
      description: >
        Creates a new session with a given start date, characters, and mission
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                campaign:
                  type: integer
                mission:
                  type: integer
                characters:
                  type: array
                  items:
                    type: integer
              required:
                - date
                - campaign
                - mission
                - characters
            examples:
              normal:
                summary: Normal
                value: >
                  {
                    "date": "2021-09-28",
                    "campaign": 1,
                    "mission": 5,
                    "characters": [
                      1,
                      2,
                      3
                    ]
                  }
      responses:
        201:
          description: Resource created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
              examples:
                normal:
                  summary: Normal
                  value: >
                    {
                      "id": 1
                    }
        400:
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    get:
      tags:
        - Sessions
      summary: Returns a list of sessions.
      description: >
        Returns a list of basic info for all session.
      operationId: getSessions
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    date:
                      type: string
                    campaign:
                      type: integer
                    mission:
                      type: integer
              examples:
                normal:
                  summary: Normal
                  value: >
                    [
                      {
                        "id": 1,
                        "date": "2021-09-21",
                        "campaign": 1,
                        "mission": 1
                      },
                      {
                        "id": 2,
                        "date": "2021-09-28",
                        "campaign": 1,
                        "mission": 2
                      }
                    ]
                empty:
                  summary: Empty
                  value: []
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /sessions/{id}:
    get:
      tags:
        - Sessions
      summary: Responds with a specific session's details
      description: >
        Returns all the details associated with a given session
      operationId: getSessionDetail
      parameters:
        - name: id
          in: path
          description: ID of requested campaign
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 1
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    date:
                      type: string
                    campaign:
                      type: integer
                    mission:
                      type: integer
                    characters:
                      type: array
                      items:
                        type: integer
                    sessionDifficultyLevel:
                      type: integer
                    townEventCompleted:
                      type: boolean
                    battleGoalsCompleted:
                      type: object
                      properties:
                        character:
                          type: integer
                        goalCompleted:
                          type: boolean
                    missionExperienceGained:
                      type: integer
              examples:
                normal:
                  summary: Normal
                  value: >
                    {
                      "id": 1,
                      "date": "2021-09-21",
                      "campaign": 1,
                      "mission": 1,
                      "characters": [
                        1, 2, 3
                      ],
                      "sessionDifficultyLevel": 1,
                      "townEventCompleted": true,
                      "battleGoalsCompleted": {
                        1: true,
                        2: true,
                        3: false
                      },
                      "missionExperienceGained": 8
                    }
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    put: # TODO flush out put endpoint, may need to break out into multple update functions
      tags:
        - Sessions
      summary: Updates a specific campaign's name
      description: >
        Updates a the name of the specific campaign for the id provided
      operationId: updateSession
      parameters:
        - name: id
          in: path
          description: ID of requested campaign
          required: true
          schema:
            type: integer
          examples:
            normal:
              summary: Normal
              value: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
            examples:
              normal:
                summary: Normal
                value: >
                  {
                    "name": "Kate's Game"
                  }
      responses:
        204:
          description: Resource updated
        404:
          description: An error occurred
components:
  responses:
    BadRequestError:
      description: The server could not understand the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            normal:
              summary: Normal
              value: >
                {
                  "code": "BadRequest",
                  "message": "Very detailed error info"
                }
    
    NotFoundError:
      description: The requested resource could not be found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            normal:
              summary: Normal
              value: >
                {
                  "code": "NotFound",
                  "message": "Very detailed error info"
                }

    UnexpectedError:
      description: An unexpected error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            normal:
              summary: Normal
              value: >
                {
                  "code": "Internal",
                  "message": "Very detailed error info"
                }

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string